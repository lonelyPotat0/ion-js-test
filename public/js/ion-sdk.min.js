var IonSDK = function (I) { var g = {}; function C(A) { if (g[A]) return g[A].exports; var n = g[A] = { i: A, l: !1, exports: {} }; return I[A].call(n.exports, n, n.exports, C), n.l = !0, n.exports } return C.m = I, C.c = g, C.d = function (I, g, A) { C.o(I, g) || Object.defineProperty(I, g, { enumerable: !0, get: A }) }, C.r = function (I) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(I, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(I, "__esModule", { value: !0 }) }, C.t = function (I, g) { if (1 & g && (I = C(I)), 8 & g) return I; if (4 & g && "object" == typeof I && I && I.__esModule) return I; var A = Object.create(null); if (C.r(A), Object.defineProperty(A, "default", { enumerable: !0, value: I }), 2 & g && "string" != typeof I) for (var n in I) C.d(A, n, function (g) { return I[g] }.bind(null, n)); return A }, C.n = function (I) { var g = I && I.__esModule ? function () { return I.default } : function () { return I }; return C.d(g, "a", g), g }, C.o = function (I, g) { return Object.prototype.hasOwnProperty.call(I, g) }, C.p = "", C(C.s = 1) }([function (module, exports, __webpack_require__) { "use strict"; eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeRemote = exports.LocalStream = exports.VideoConstraints = void 0;\nconst resolutions = ['qvga', 'vga', 'shd', 'hd', 'fhd', 'qhd'];\nexports.VideoConstraints = {\n    qvga: {\n        resolution: {\n            width: { ideal: 320 },\n            height: { ideal: 180 },\n            frameRate: {\n                ideal: 15,\n                max: 30,\n            },\n        },\n        encodings: {\n            maxBitrate: 150000,\n            maxFramerate: 15.0,\n        },\n    },\n    vga: {\n        resolution: {\n            width: { ideal: 640 },\n            height: { ideal: 360 },\n            frameRate: {\n                ideal: 30,\n                max: 60,\n            },\n        },\n        encodings: {\n            maxBitrate: 500000,\n            maxFramerate: 30.0,\n        },\n    },\n    shd: {\n        resolution: {\n            width: { ideal: 960 },\n            height: { ideal: 540 },\n            frameRate: {\n                ideal: 30,\n                max: 60,\n            },\n        },\n        encodings: {\n            maxBitrate: 1200000,\n            maxFramerate: 30.0,\n        },\n    },\n    hd: {\n        resolution: {\n            width: { ideal: 1280 },\n            height: { ideal: 720 },\n            frameRate: {\n                ideal: 30,\n                max: 60,\n            },\n        },\n        encodings: {\n            maxBitrate: 2500000,\n            maxFramerate: 30.0,\n        },\n    },\n    fhd: {\n        resolution: {\n            width: { ideal: 1920 },\n            height: { ideal: 1080 },\n            frameRate: {\n                ideal: 30,\n                max: 60,\n            },\n        },\n        encodings: {\n            maxBitrate: 4000000,\n            maxFramerate: 30.0,\n        },\n    },\n    qhd: {\n        resolution: {\n            width: { ideal: 2560 },\n            height: { ideal: 1440 },\n            frameRate: {\n                ideal: 30,\n                max: 60,\n            },\n        },\n        encodings: {\n            maxBitrate: 8000000,\n            maxFramerate: 30.0,\n        },\n    },\n};\nconst defaults = {\n    resolution: 'hd',\n    codec: 'vp8',\n    audio: true,\n    video: true,\n    simulcast: false,\n};\nclass LocalStream extends MediaStream {\n    constructor(stream, constraints) {\n        super(stream);\n        this.constraints = constraints;\n    }\n    static async getUserMedia(constraints = defaults) {\n        const stream = await navigator.mediaDevices.getUserMedia({\n            audio: LocalStream.computeAudioConstraints({\n                ...defaults,\n                ...constraints,\n            }),\n            video: LocalStream.computeVideoConstraints({\n                ...defaults,\n                ...constraints,\n            }),\n        });\n        return new LocalStream(stream, {\n            ...defaults,\n            ...constraints,\n        });\n    }\n    static async getDisplayMedia(constraints = {\n        codec: 'vp8',\n        resolution: 'hd',\n        audio: false,\n        video: true,\n        simulcast: false,\n    }) {\n        // @ts-ignore\n        const stream = await navigator.mediaDevices.getDisplayMedia({\n            video: true,\n        });\n        return new LocalStream(stream, {\n            ...defaults,\n            ...constraints,\n        });\n    }\n    static computeAudioConstraints(constraints) {\n        return constraints.audio;\n    }\n    static computeVideoConstraints(constraints) {\n        if (constraints.video instanceof Object) {\n            return constraints.video;\n        }\n        else if (constraints.video && constraints.resolution) {\n            return {\n                ...exports.VideoConstraints[constraints.resolution].resolution,\n            };\n        }\n        return constraints.video;\n    }\n    getTrack(kind) {\n        let tracks;\n        if (kind === 'video') {\n            tracks = this.getVideoTracks();\n            return tracks.length > 0 ? this.getVideoTracks()[0] : undefined;\n        }\n        tracks = this.getAudioTracks();\n        return tracks.length > 0 ? this.getAudioTracks()[0] : undefined;\n    }\n    async getNewTrack(kind) {\n        const stream = await navigator.mediaDevices.getUserMedia({\n            [kind]: kind === 'video'\n                ? LocalStream.computeVideoConstraints(this.constraints)\n                : LocalStream.computeAudioConstraints(this.constraints),\n        });\n        return stream.getTracks()[0];\n    }\n    publishTrack(track) {\n        if (this.pc) {\n            if (track.kind === 'video' && this.constraints.simulcast) {\n                const idx = resolutions.indexOf(this.constraints.resolution);\n                const encodings = [\n                    {\n                        rid: 'f',\n                        maxBitrate: exports.VideoConstraints[resolutions[idx]].encodings.maxBitrate,\n                        maxFramerate: exports.VideoConstraints[resolutions[idx]].encodings.maxFramerate,\n                    },\n                ];\n                if (idx - 1 >= 0) {\n                    encodings.push({\n                        rid: 'h',\n                        scaleResolutionDownBy: 2.0,\n                        maxBitrate: exports.VideoConstraints[resolutions[idx - 1]].encodings.maxBitrate,\n                        maxFramerate: exports.VideoConstraints[resolutions[idx - 1]].encodings.maxFramerate,\n                    });\n                }\n                if (idx - 2 >= 0) {\n                    encodings.push({\n                        rid: 'q',\n                        scaleResolutionDownBy: 4.0,\n                        maxBitrate: exports.VideoConstraints[resolutions[idx - 2]].encodings.maxBitrate,\n                        maxFramerate: exports.VideoConstraints[resolutions[idx - 2]].encodings.maxFramerate,\n                    });\n                }\n                const transceiver = this.pc.addTransceiver(track, {\n                    streams: [this],\n                    direction: 'sendonly',\n                    sendEncodings: encodings,\n                });\n                this.setPreferredCodec(transceiver);\n            }\n            else {\n                const transceiver = this.pc.addTransceiver(track, {\n                    streams: [this],\n                    direction: 'sendonly',\n                    sendEncodings: track.kind === 'video' ? [exports.VideoConstraints[this.constraints.resolution].encodings] : undefined,\n                });\n                if (track.kind === 'video') {\n                    this.setPreferredCodec(transceiver);\n                }\n            }\n        }\n    }\n    setPreferredCodec(transceiver) {\n        if ('setCodecPreferences' in transceiver) {\n            const cap = RTCRtpSender.getCapabilities('video');\n            if (!cap)\n                return;\n            const selCodec = cap.codecs.find((c) => c.mimeType === `video/${this.constraints.codec.toUpperCase()}` || c.mimeType === `audio/OPUS`);\n            if (selCodec) {\n                transceiver.setCodecPreferences([selCodec]);\n            }\n        }\n    }\n    updateTrack(next, prev) {\n        this.addTrack(next);\n        // If published, replace published track with track from new device\n        if (prev) {\n            this.removeTrack(prev);\n            prev.stop();\n            if (this.pc) {\n                this.pc.getSenders().forEach(async (sender) => {\n                    var _a, _b;\n                    if (((_a = sender === null || sender === void 0 ? void 0 : sender.track) === null || _a === void 0 ? void 0 : _a.kind) === next.kind) {\n                        (_b = sender.track) === null || _b === void 0 ? void 0 : _b.stop();\n                        sender.replaceTrack(next);\n                    }\n                });\n            }\n        }\n        else {\n            this.addTrack(next);\n            if (this.pc) {\n                this.publishTrack(next);\n            }\n        }\n    }\n    publish(pc) {\n        this.pc = pc;\n        this.getTracks().forEach(this.publishTrack.bind(this));\n    }\n    unpublish() {\n        if (this.pc) {\n            const tracks = this.getTracks();\n            this.pc.getSenders().forEach((s) => {\n                if (s.track && tracks.includes(s.track)) {\n                    this.pc.removeTrack(s);\n                }\n            });\n        }\n    }\n    async switchDevice(kind, deviceId) {\n        this.constraints = {\n            ...this.constraints,\n            [kind]: this.constraints[kind] instanceof Object\n                ? {\n                    ...this.constraints[kind],\n                    deviceId,\n                }\n                : { deviceId },\n        };\n        const prev = this.getTrack(kind);\n        const next = await this.getNewTrack(kind);\n        this.updateTrack(next, prev);\n    }\n    mute(kind) {\n        const track = this.getTrack(kind);\n        if (track) {\n            track.stop();\n        }\n    }\n    async unmute(kind) {\n        const prev = this.getTrack(kind);\n        const track = await this.getNewTrack(kind);\n        this.updateTrack(track, prev);\n    }\n}\nexports.LocalStream = LocalStream;\nfunction makeRemote(stream, transport) {\n    const remote = stream;\n    remote.audio = true;\n    remote.video = 'none';\n    remote._videoPreMute = 'high';\n    const select = () => {\n        const call = {\n            streamId: remote.id,\n            video: remote.video,\n            audio: remote.audio,\n        };\n        if (transport.api) {\n            if (transport.api.readyState !== 'open') {\n                // queue call if we aren't open yet\n                transport.api.onopen = () => { var _a; return (_a = transport.api) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(call)); };\n            }\n            else {\n                transport.api.send(JSON.stringify(call));\n            }\n        }\n    };\n    remote.preferLayer = (layer) => {\n        remote.video = layer;\n        select();\n    };\n    remote.mute = (kind) => {\n        if (kind === 'audio') {\n            remote.audio = false;\n        }\n        else if (kind === 'video') {\n            remote._videoPreMute = remote.video;\n            remote.video = 'none';\n        }\n        select();\n    };\n    remote.unmute = (kind) => {\n        if (kind === 'audio') {\n            remote.audio = true;\n        }\n        else if (kind === 'video') {\n            remote.video = remote._videoPreMute;\n        }\n        select();\n    };\n    return remote;\n}\nexports.makeRemote = makeRemote;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n") }, function (module, exports, __webpack_require__) { "use strict"; eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nexports.LocalStream = exports.Client = void 0;\nconst client_1 = __webpack_require__(2);\nexports.Client = client_1.default;\nconst stream_1 = __webpack_require__(0);\nObject.defineProperty(exports, "LocalStream", { enumerable: true, get: function () { return stream_1.LocalStream; } });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Jb25TREsvLi9zcmMvaW5kZXgudHM/NzFiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsQ0FBVTtBQUNuQztBQUNBLGlCQUFpQixtQkFBTyxDQUFDLENBQVU7QUFDbkMsK0NBQStDLHFDQUFxQyw2QkFBNkIsRUFBRSxFQUFFIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTG9jYWxTdHJlYW0gPSBleHBvcnRzLkNsaWVudCA9IHZvaWQgMDtcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIi4vY2xpZW50XCIpO1xuZXhwb3J0cy5DbGllbnQgPSBjbGllbnRfMS5kZWZhdWx0O1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwiLi9zdHJlYW1cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb2NhbFN0cmVhbVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RyZWFtXzEuTG9jYWxTdHJlYW07IH0gfSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n') }, function (module, exports, __webpack_require__) { "use strict"; eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transport = void 0;\nconst stream_1 = __webpack_require__(0);\nconst API_CHANNEL = 'ion-sfu';\nconst ERR_NO_SESSION = 'no active session, join first';\nvar Role;\n(function (Role) {\n    Role[Role[\"pub\"] = 0] = \"pub\";\n    Role[Role[\"sub\"] = 1] = \"sub\";\n})(Role || (Role = {}));\nclass Transport {\n    constructor(role, signal, config) {\n        this.signal = signal;\n        this.pc = new RTCPeerConnection(config);\n        this.candidates = [];\n        if (role === Role.pub) {\n            this.pc.createDataChannel(API_CHANNEL);\n        }\n        this.pc.onicecandidate = ({ candidate }) => {\n            if (candidate) {\n                this.signal.trickle({ target: role, candidate });\n            }\n        };\n    }\n}\nexports.Transport = Transport;\nclass Client {\n    constructor(signal, config = {\n        codec: 'vp8',\n        iceServers: [\n            {\n                urls: [\n                    'stun:stun.l.google.com:19302',\n                    'stun:stun1.l.google.com:19302',\n                    'stun:stun2.l.google.com:19302',\n                    'stun:stun3.l.google.com:19302',\n                    'stun:stun4.l.google.com:19302',\n                ],\n            },\n        ],\n    }) {\n        this.signal = signal;\n        this.config = config;\n        signal.onnegotiate = this.negotiate.bind(this);\n        signal.ontrickle = this.trickle.bind(this);\n    }\n    async join(sid) {\n        this.transports = {\n            [Role.pub]: new Transport(Role.pub, this.signal, this.config),\n            [Role.sub]: new Transport(Role.sub, this.signal, this.config),\n        };\n        this.transports[Role.sub].pc.ontrack = (ev) => {\n            const stream = ev.streams[0];\n            const remote = stream_1.makeRemote(stream, this.transports[Role.sub]);\n            if (this.ontrack) {\n                this.ontrack(ev.track, remote);\n            }\n        };\n        this.transports[Role.sub].pc.ondatachannel = (ev) => {\n            if (ev.channel.label === API_CHANNEL) {\n                this.transports[Role.sub].api = ev.channel;\n                return;\n            }\n            if (this.ondatachannel) {\n                this.ondatachannel(ev);\n            }\n        };\n        const offer = await this.transports[Role.pub].pc.createOffer();\n        await this.transports[Role.pub].pc.setLocalDescription(offer);\n        const answer = await this.signal.join(sid, offer);\n        await this.transports[Role.pub].pc.setRemoteDescription(answer);\n        this.transports[Role.pub].candidates.forEach((c) => this.transports[Role.pub].pc.addIceCandidate(c));\n        this.transports[Role.pub].pc.onnegotiationneeded = this.onNegotiationNeeded.bind(this);\n    }\n    leave() {\n        if (this.transports) {\n            Object.values(this.transports).forEach((t) => t.pc.close());\n            delete this.transports;\n        }\n    }\n    getPubStats(selector) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        return this.transports[Role.pub].pc.getStats(selector);\n    }\n    getSubStats(selector) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        return this.transports[Role.sub].pc.getStats(selector);\n    }\n    publish(stream) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        stream.publish(this.transports[Role.pub].pc);\n    }\n    createDataChannel(label) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        return this.transports[Role.pub].pc.createDataChannel(label);\n    }\n    close() {\n        if (this.transports) {\n            Object.values(this.transports).forEach((t) => t.pc.close());\n        }\n        this.signal.close();\n    }\n    trickle({ candidate, target }) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        if (this.transports[target].pc.remoteDescription) {\n            this.transports[target].pc.addIceCandidate(candidate);\n        }\n        else {\n            this.transports[target].candidates.push(candidate);\n        }\n    }\n    async negotiate(description) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        try {\n            await this.transports[Role.sub].pc.setRemoteDescription(description);\n            this.transports[Role.sub].candidates.forEach((c) => this.transports[Role.sub].pc.addIceCandidate(c));\n            this.transports[Role.sub].candidates = [];\n            const answer = await this.transports[Role.sub].pc.createAnswer();\n            await this.transports[Role.sub].pc.setLocalDescription(answer);\n            this.signal.answer(answer);\n        }\n        catch (err) {\n            /* tslint:disable-next-line:no-console */\n            console.error(err);\n        }\n    }\n    async onNegotiationNeeded() {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        try {\n            const offer = await this.transports[Role.pub].pc.createOffer();\n            await this.transports[Role.pub].pc.setLocalDescription(offer);\n            const answer = await this.signal.offer(offer);\n            await this.transports[Role.pub].pc.setRemoteDescription(answer);\n        }\n        catch (err) {\n            /* tslint:disable-next-line:no-console */\n            console.error(err);\n        }\n    }\n}\nexports.default = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Jb25TREsvLi9zcmMvY2xpZW50LnRzP2U3MWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLGlCQUFpQixtQkFBTyxDQUFDLENBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQkFBb0I7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxZQUFZO0FBQy9DO0FBQ0EscUNBQXFDLDBCQUEwQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsb0JBQW9CO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UcmFuc3BvcnQgPSB2b2lkIDA7XG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCIuL3N0cmVhbVwiKTtcbmNvbnN0IEFQSV9DSEFOTkVMID0gJ2lvbi1zZnUnO1xuY29uc3QgRVJSX05PX1NFU1NJT04gPSAnbm8gYWN0aXZlIHNlc3Npb24sIGpvaW4gZmlyc3QnO1xudmFyIFJvbGU7XG4oZnVuY3Rpb24gKFJvbGUpIHtcbiAgICBSb2xlW1JvbGVbXCJwdWJcIl0gPSAwXSA9IFwicHViXCI7XG4gICAgUm9sZVtSb2xlW1wic3ViXCJdID0gMV0gPSBcInN1YlwiO1xufSkoUm9sZSB8fCAoUm9sZSA9IHt9KSk7XG5jbGFzcyBUcmFuc3BvcnQge1xuICAgIGNvbnN0cnVjdG9yKHJvbGUsIHNpZ25hbCwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuc2lnbmFsID0gc2lnbmFsO1xuICAgICAgICB0aGlzLnBjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlcyA9IFtdO1xuICAgICAgICBpZiAocm9sZSA9PT0gUm9sZS5wdWIpIHtcbiAgICAgICAgICAgIHRoaXMucGMuY3JlYXRlRGF0YUNoYW5uZWwoQVBJX0NIQU5ORUwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGMub25pY2VjYW5kaWRhdGUgPSAoeyBjYW5kaWRhdGUgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2lnbmFsLnRyaWNrbGUoeyB0YXJnZXQ6IHJvbGUsIGNhbmRpZGF0ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLlRyYW5zcG9ydCA9IFRyYW5zcG9ydDtcbmNsYXNzIENsaWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2lnbmFsLCBjb25maWcgPSB7XG4gICAgICAgIGNvZGVjOiAndnA4JyxcbiAgICAgICAgaWNlU2VydmVyczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHVybHM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3N0dW46c3R1bi5sLmdvb2dsZS5jb206MTkzMDInLFxuICAgICAgICAgICAgICAgICAgICAnc3R1bjpzdHVuMS5sLmdvb2dsZS5jb206MTkzMDInLFxuICAgICAgICAgICAgICAgICAgICAnc3R1bjpzdHVuMi5sLmdvb2dsZS5jb206MTkzMDInLFxuICAgICAgICAgICAgICAgICAgICAnc3R1bjpzdHVuMy5sLmdvb2dsZS5jb206MTkzMDInLFxuICAgICAgICAgICAgICAgICAgICAnc3R1bjpzdHVuNC5sLmdvb2dsZS5jb206MTkzMDInLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0pIHtcbiAgICAgICAgdGhpcy5zaWduYWwgPSBzaWduYWw7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICBzaWduYWwub25uZWdvdGlhdGUgPSB0aGlzLm5lZ290aWF0ZS5iaW5kKHRoaXMpO1xuICAgICAgICBzaWduYWwub250cmlja2xlID0gdGhpcy50cmlja2xlLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGFzeW5jIGpvaW4oc2lkKSB7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0cyA9IHtcbiAgICAgICAgICAgIFtSb2xlLnB1Yl06IG5ldyBUcmFuc3BvcnQoUm9sZS5wdWIsIHRoaXMuc2lnbmFsLCB0aGlzLmNvbmZpZyksXG4gICAgICAgICAgICBbUm9sZS5zdWJdOiBuZXcgVHJhbnNwb3J0KFJvbGUuc3ViLCB0aGlzLnNpZ25hbCwgdGhpcy5jb25maWcpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRyYW5zcG9ydHNbUm9sZS5zdWJdLnBjLm9udHJhY2sgPSAoZXYpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IGV2LnN0cmVhbXNbMF07XG4gICAgICAgICAgICBjb25zdCByZW1vdGUgPSBzdHJlYW1fMS5tYWtlUmVtb3RlKHN0cmVhbSwgdGhpcy50cmFuc3BvcnRzW1JvbGUuc3ViXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5vbnRyYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbnRyYWNrKGV2LnRyYWNrLCByZW1vdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRyYW5zcG9ydHNbUm9sZS5zdWJdLnBjLm9uZGF0YWNoYW5uZWwgPSAoZXYpID0+IHtcbiAgICAgICAgICAgIGlmIChldi5jaGFubmVsLmxhYmVsID09PSBBUElfQ0hBTk5FTCkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0c1tSb2xlLnN1Yl0uYXBpID0gZXYuY2hhbm5lbDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vbmRhdGFjaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmRhdGFjaGFubmVsKGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLnRyYW5zcG9ydHNbUm9sZS5wdWJdLnBjLmNyZWF0ZU9mZmVyKCk7XG4gICAgICAgIGF3YWl0IHRoaXMudHJhbnNwb3J0c1tSb2xlLnB1Yl0ucGMuc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuc2lnbmFsLmpvaW4oc2lkLCBvZmZlcik7XG4gICAgICAgIGF3YWl0IHRoaXMudHJhbnNwb3J0c1tSb2xlLnB1Yl0ucGMuc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnRzW1JvbGUucHViXS5jYW5kaWRhdGVzLmZvckVhY2goKGMpID0+IHRoaXMudHJhbnNwb3J0c1tSb2xlLnB1Yl0ucGMuYWRkSWNlQ2FuZGlkYXRlKGMpKTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnRzW1JvbGUucHViXS5wYy5vbm5lZ290aWF0aW9ubmVlZGVkID0gdGhpcy5vbk5lZ290aWF0aW9uTmVlZGVkLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGxlYXZlKCkge1xuICAgICAgICBpZiAodGhpcy50cmFuc3BvcnRzKSB7XG4gICAgICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMudHJhbnNwb3J0cykuZm9yRWFjaCgodCkgPT4gdC5wYy5jbG9zZSgpKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRyYW5zcG9ydHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UHViU3RhdHMoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRyYW5zcG9ydHMpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKEVSUl9OT19TRVNTSU9OKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50cmFuc3BvcnRzW1JvbGUucHViXS5wYy5nZXRTdGF0cyhzZWxlY3Rvcik7XG4gICAgfVxuICAgIGdldFN1YlN0YXRzKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICghdGhpcy50cmFuc3BvcnRzKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihFUlJfTk9fU0VTU0lPTik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0c1tSb2xlLnN1Yl0ucGMuZ2V0U3RhdHMoc2VsZWN0b3IpO1xuICAgIH1cbiAgICBwdWJsaXNoKHN0cmVhbSkge1xuICAgICAgICBpZiAoIXRoaXMudHJhbnNwb3J0cykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoRVJSX05PX1NFU1NJT04pO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbS5wdWJsaXNoKHRoaXMudHJhbnNwb3J0c1tSb2xlLnB1Yl0ucGMpO1xuICAgIH1cbiAgICBjcmVhdGVEYXRhQ2hhbm5lbChsYWJlbCkge1xuICAgICAgICBpZiAoIXRoaXMudHJhbnNwb3J0cykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoRVJSX05PX1NFU1NJT04pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydHNbUm9sZS5wdWJdLnBjLmNyZWF0ZURhdGFDaGFubmVsKGxhYmVsKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYW5zcG9ydHMpIHtcbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXModGhpcy50cmFuc3BvcnRzKS5mb3JFYWNoKCh0KSA9PiB0LnBjLmNsb3NlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2lnbmFsLmNsb3NlKCk7XG4gICAgfVxuICAgIHRyaWNrbGUoeyBjYW5kaWRhdGUsIHRhcmdldCB9KSB7XG4gICAgICAgIGlmICghdGhpcy50cmFuc3BvcnRzKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihFUlJfTk9fU0VTU0lPTik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0c1t0YXJnZXRdLnBjLnJlbW90ZURlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydHNbdGFyZ2V0XS5wYy5hZGRJY2VDYW5kaWRhdGUoY2FuZGlkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0c1t0YXJnZXRdLmNhbmRpZGF0ZXMucHVzaChjYW5kaWRhdGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG5lZ290aWF0ZShkZXNjcmlwdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMudHJhbnNwb3J0cykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoRVJSX05PX1NFU1NJT04pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnRyYW5zcG9ydHNbUm9sZS5zdWJdLnBjLnNldFJlbW90ZURlc2NyaXB0aW9uKGRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0c1tSb2xlLnN1Yl0uY2FuZGlkYXRlcy5mb3JFYWNoKChjKSA9PiB0aGlzLnRyYW5zcG9ydHNbUm9sZS5zdWJdLnBjLmFkZEljZUNhbmRpZGF0ZShjKSk7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcG9ydHNbUm9sZS5zdWJdLmNhbmRpZGF0ZXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMudHJhbnNwb3J0c1tSb2xlLnN1Yl0ucGMuY3JlYXRlQW5zd2VyKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnRyYW5zcG9ydHNbUm9sZS5zdWJdLnBjLnNldExvY2FsRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsLmFuc3dlcihhbnN3ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlICovXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25OZWdvdGlhdGlvbk5lZWRlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRyYW5zcG9ydHMpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKEVSUl9OT19TRVNTSU9OKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgb2ZmZXIgPSBhd2FpdCB0aGlzLnRyYW5zcG9ydHNbUm9sZS5wdWJdLnBjLmNyZWF0ZU9mZmVyKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnRyYW5zcG9ydHNbUm9sZS5wdWJdLnBjLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgdGhpcy5zaWduYWwub2ZmZXIob2ZmZXIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy50cmFuc3BvcnRzW1JvbGUucHViXS5wYy5zZXRSZW1vdGVEZXNjcmlwdGlvbihhbnN3ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlICovXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBDbGllbnQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n") }]);